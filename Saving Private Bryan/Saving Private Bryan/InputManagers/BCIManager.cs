using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework;
using Emotiv;
using System.Diagnostics;
using System.IO;

namespace Saving_Private_Bryan
{
    /// <summary>
    /// Manages the Brain Computing Interface (Emotive Engine) input in a game of Saving Private Bryan.
    /// </summary>
    class BCIManager
    {

        /// <summary>
        /// Emovitve device
        /// </summary>
        EmoEngine engine;

        /// <summary>
        /// The time that a user is concentrated
        /// </summary>
        int TimeConcentrated;

        /// <summary>
        /// Indicates whether the user can concentrate
        /// </summary>
        bool LookForConcentration;

        /// <summary>
        /// Indicates whether the user is concentrated
        /// </summary>
        bool Concentrated;

        /// <summary>
        /// Concentration threshold
        /// </summary>
        public static float CONCENTRATION_TRESHOLD = 0.55f;

        /// <summary>
        /// Raw float value for concentration
        /// </summary>
        internal float ConcentrationLevel;

        /// <summary>
        /// Starts up a new BCIManager, allowing for Brain Computing Input in a game of Saving Private Bryan.
        /// </summary>
        public BCIManager()
        {
            TimeConcentrated = 0;
            Concentrated = true;
            engine = EmoEngine.Instance; // Set up new EmoEngine
            
            engine.EmoStateUpdated +=
                new EmoEngine.EmoStateUpdatedEventHandler(engine_EmoStateUpdated); // Listen for an Event indicating change in the BCI.
            engine.Connect(); // Connect to the EmoEngine

            // Write output header
            //WriteOutput("Timestamp, Boredom, Longterm Excitement, Shortterm Excitement, Frustration, Meditation");
        }

        /// <summary>
        /// Disconnects from the BCI, required for proper exiting.
        /// </summary>
        internal void Disconnect()
        {
            engine.Disconnect();
        }

        /// <summary>
        /// Updates the BCI Input for a new frame.
        /// </summary>
        /// <param name="time">A Snapshot of the time elapsed</param>
        internal void Update(GameTime time){

            try
            {
                engine.ProcessEvents(1000); // Listen to the BCI.
            }
            catch (EmoEngineException)
            {
            }

            if (LookForConcentration && Concentrated) // Set the Time Concentrated to a new value
                TimeConcentrated += time.ElapsedGameTime.Milliseconds;
            else
                TimeConcentrated = 0;
        }

        /// <summary>
        /// Function called by the EmoEngine if the state of the BCI changes.
        /// </summary>
        /// <param name="sender">Sender of the event.</param>
        /// <param name="e">Arguments generated by the event.</param>
        void engine_EmoStateUpdated(object sender, EmoStateUpdatedEventArgs e)
        {
            // Get the current state from the device
            EmoState es = e.emoState;

            // Read the concentration level as short term excitement
            ConcentrationLevel = es.AffectivGetExcitementShortTermScore();
            // Check whether the user is actually concentrated enough
            Concentrated = ConcentrationLevel <= CONCENTRATION_TRESHOLD;

        }

        /// <summary>
        /// Indicates whether the player is contentrated, based on his BCI value.
        /// </summary>
        /// <returns>A boolean indicating whether the player is concentrated</returns>
        internal bool isConcentrated()
        {
            return Concentrated;
        }

        /// <summary>
        /// Indicates whether the player is trying to concentrate.
        /// </summary>
        /// <returns>Boolean indicating whether the player is trying to concentrate.</returns>
        internal bool IsConcentrating()
        {
            return LookForConcentration;
        }

        /// <summary>
        /// Tells the BCI that concentration should be measured
        /// </summary>
        internal void StartConcentrating()
        {
            LookForConcentration = true;
        }

        /// <summary>
        /// Tells the BCI to stop measuring concentration.
        /// </summary>
        internal void StopConcentrating()
        {
            LookForConcentration = false;
        }

        /// <summary>
        /// Checks whether the player has been concentrated enough for a specific period of time
        /// </summary>
        /// <param name="RequiredTime">The minimum time, in miliseconds, the player should be concentrated</param>
        /// <returns>Boolean indicating whether the player has been concentrated for the given time.</returns>
        internal bool IsConcentratedFor(double RequiredTime)
        {
            return LookForConcentration && TimeConcentrated >= RequiredTime;
        }
    }
}
